spring.application.name=mcp-service-registry
server.port=8444

# Spring JPA Configuration - PostgreSQL
spring.jpa.properties.hibernate.dialect=org.hibernate.spatial.dialect.postgis.PostgisDialect
spring.jpa.generate-ddl=true
spring.jpa.hibernate.ddl-auto=update
spring.jpa.hibernate.show-sql=true
spring.jpa.properties.hibernate.search.backend.analysis.configurer=class:net.maritimeconnectivity.serviceregistry.config.MSRLuceneAnalysisConfigurer
spring.jpa.properties.hibernate.search.backend.directory.root=./lucene/

# Datasource Configuration
spring.datasource.url=jdbc:postgresql://localhost:5432/mcp_service_registry
spring.datasource.username=sysadmin
spring.datasource.password=sysadmin

# Keycloak Configuration
keycloak.auth-server-url=http://palatia.grad-rrnav.pub:8090/auth
keycloak.realm=MCP
keycloak.resource=service-registry
keycloak.credentials.secret=55d2bf7c-6896-41c5-a73f-963af0b50e33
keycloak.ssl-required=none
keycloak.principal-attribute=preferred_username
keycloak.autodetect-bearer-only=true
keycloak.use-resource-role-mappings=true
keycloak.token-minimum-time-to-live=30

#logging.level.org.keycloak=DEBUG
# Enable the keycloak security constraints in all api endpoints
keycloak.security-constraints[0].authRoles[0]=*
keycloak.security-constraints[0].securityCollections[0].patterns[0]=/api/*

# Also by adding the constraints in our login, we can automatically authorise our AJAX
keycloak.security-constraints[1].authRoles[0]=*
keycloak.security-constraints[1].securityCollections[0].patterns[0]=/sso/login

# Start enforcing the policies defined in keycloak
keycloak.policy-enforcer-config.enforcement-mode=PERMISSIVE
keycloak.policy-enforcer-config.http-method-as-scope=true
keycloak.policy-enforcer-config.lazy-load-paths=true

# Remove the html pages and sources from the policy enforcement
keycloak.policy-enforcer-config.paths[0].name=home_page
keycloak.policy-enforcer-config.paths[0].path=/
keycloak.policy-enforcer-config.paths[0].methods[0].method=GET
keycloak.policy-enforcer-config.paths[0].enforcement-mode=DISABLED
keycloak.policy-enforcer-config.paths[1].name=webjars
keycloak.policy-enforcer-config.paths[1].path=/webjars/*
keycloak.policy-enforcer-config.paths[1].methods[0].method=GET
keycloak.policy-enforcer-config.paths[1].enforcement-mode=DISABLED]
keycloak.policy-enforcer-config.paths[2].name=static_sources
keycloak.policy-enforcer-config.paths[2].path=/static/*
keycloak.policy-enforcer-config.paths[2].methods[0].method=GET
keycloak.policy-enforcer-config.paths[2].enforcement-mode=DISABLED

#The default permission to allow access to the web interface
# API Information
swagger.title=Maritime Connectivity Platform Service Registry API
swagger.description=Maritime Connectivity Platform Service Registry, developed by the MCC MSR WG
swagger.version=0.1
swagger.termsOfServiceUrl=null
swagger.contactName=MCP Consortium
swagger.contactUrl=https://mcp.discourse.group/
swagger.contactEmail=Nikolaos.Vastardis@gla-rad.org
swagger.license=Apache-2.0
swagger.licenseUrl=http://www.apache.org/licenses/LICENSE-2.0

# Service Registry Configuration
net.maritimeconnectivity.serviceregistry.allowedContentTypes=application/pdf,application/vnd.openxmlformats-officedocument.wordprocessingml.document,application/vnd.oasis.opendocument.text
net.maritimeconnectivity.serviceregistry.ledger.server-url=ws://localhost:8546
net.maritimeconnectivity.serviceregistry.ledger.credentials=0xae6ae8e5ccbfb04590405997ee2d52d2b330726137b875053c36d94e974d162f
net.maritimeconnectivity.serviceregistry.ledger.contract-address=f17f52151EbEF6C7334FAD080c5704D77216b732

# Front-end Information
info.msr.name=test MSR instance
info.msr.mrn=urn:mrn:mcp:msr:test:testMSR1
info.msr.url=http://localhost:8444
info.msr.operatorName=test company
info.msr.operatorMrn=urn:mrn:mcp:org:test:testMSROperator1
info.msr.operatorContact=test@test.org
info.msr.operatorUrl=https://maritimeconnectivity.net/
info.msr.copyright=Copyright \u00A9 2021 Maritime Connectivity Platform Consortium
info.msr.projectLocation=https://github.com/maritimeconnectivity/ServiceRegistry
