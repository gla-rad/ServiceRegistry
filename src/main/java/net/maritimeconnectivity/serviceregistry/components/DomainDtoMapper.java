/*
 * Copyright (c) 2024 Maritime Connectivity Platform Consortium
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *        http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package net.maritimeconnectivity.serviceregistry.components;

import net.maritimeconnectivity.serviceregistry.models.dto.datatables.DtPage;
import net.maritimeconnectivity.serviceregistry.models.dto.datatables.DtPagingRequest;
import org.modelmapper.ModelMapper;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.Page;
import org.springframework.stereotype.Component;
import org.springframework.transaction.annotation.Transactional;

import java.util.List;
import java.util.stream.Collectors;

/**
 * The Domain-DTO Object Mapper Component.
 *
 * @param <F>   The FROM object type
 * @param <T>   The TO object type
 * @author Nikolaos Vastardis (email: Nikolaos.Vastardis@gla-rad.org)
 */
@Component
public class DomainDtoMapper<F, T> {

    /**
     * The Model Mapper.
     */
    @Autowired
    ModelMapper modelMapper;

    /**
     * Returns the model mapper.
     *
     * @return the model mapper
     */
    public ModelMapper getModelMapper() {
        return this.modelMapper;
    }

    /**
     * Map the FROM object page generated by a datatables paging request into a
     * TO datatables page.
     *
     * @param page              The FROM object page
     * @param dtPagingRequest   The datatables paging request
     * @param clazz             The class to map the FROM objects to
     * @return the mapped TO object datatables page
     */
    @Transactional
    public DtPage<T> convertToDtPage(Page<F> page, DtPagingRequest dtPagingRequest, Class<? extends T> clazz) {
        return new DtPage<>(this.convertToPage(page, clazz), dtPagingRequest);
    }

    /**
     * Map the FROM object page into a TO page.
     *
     * @param page              The FROM object page
     * @param clazz             The class to map the FROM objects to
     * @return the mapped TO object page
     */
    @Transactional
    public Page<T> convertToPage(Page<F> page, Class<? extends T> clazz) {
        return page.map(obj -> this.convertTo(obj, clazz));
    }

    /**
     * Map the FROM object list into a TO list.
     *
     * @param list              The FROM object list
     * @param clazz             The class to map the FROM objects to
     * @return the mapped TO object list
     */
    @Transactional
    public List<T> convertToList(List<F> list, Class<? extends T> clazz) {
        return list.stream()
                .map(obj -> this.convertTo(obj, clazz))
                .collect(Collectors.toList());
    }

    /**
     * Map the FROM object into a TO object.
     *
     * @param fromObj           The FROM object
     * @param clazz             The class to map the FROM object to
     * @return the mapped TO object
     */
    @Transactional
    public T convertTo(F fromObj, Class<? extends T> clazz) {
        return this.modelMapper.map(fromObj, clazz);
    }

}
